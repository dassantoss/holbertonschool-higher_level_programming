=========================
How to use add_integer.py
=========================

This module defines a function called ``add_integer(a, b=98)`` that adds two integers.

Usage
=====

``add_integer(...)`` function returns the addition of its two arguments.  When applied 
to numbers, it produces the same result as using the `+` operator.

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5

::

	>>> add_integer(2, -3)
	-1

The function also accepts floating-point values and automatically cast them to integers 
before perfoming the addition.

::

	>>> add_integer(2.0, 3.0)
	5

Note that floats are casted to ints before the addition is performed.

::

	>>> add_integer(2.9, 0.2)
	2

You can also combine floating-point and non-floating point values.

::

	>>> add_integer(2.3, -3)
-	1

The second argument ``b`` is optional, and its default value is 98.

::

    >>> add_integer(2)
    100

Handling Non-Numbers
====================

The ``add_integer()`` function expects both arguments to be integers or floats. 
If either argument is a non-integer and non-float, a TypeError exception is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only 
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

The function also handles NaN (Not a Number) values.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer















